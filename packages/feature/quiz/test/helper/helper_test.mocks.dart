// Mocks generated by Mockito 5.4.4 from annotations
// in feature_quiz/test/helper/helper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:core_dao/dao/quiz_get_all/quiz_get_all_dao.dart' as _i7;
import 'package:core_dao/dao/quiz_get_all/quiz_get_all_request.dart' as _i9;
import 'package:core_dao/dao/quiz_get_all/quiz_get_all_response.dart' as _i3;
import 'package:core_designsystem/designsystem.dart' as _i13;
import 'package:core_model/quiz/quiz_model.dart' as _i16;
import 'package:core_repository/sql/quiz_favorite_sql/quiz_favorite_sql_repository.dart'
    as _i15;
import 'package:feature_quiz/quiz_result/quiz_result_page_state.dart' as _i6;
import 'package:feature_quiz/quiz_result/quiz_result_page_viewmodel.dart'
    as _i11;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/src/widgets/notification_listener.dart' as _i10;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:state_notifier/state_notifier.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRef_0<State extends Object?> extends _i1.SmartFake
    implements _i2.Ref<State> {
  _FakeRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuizGetAllResponse_1 extends _i1.SmartFake
    implements _i3.QuizGetAllResponse {
  _FakeQuizGetAllResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i5.DiagnosticsNode {
  _FakeDiagnosticsNode_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i5.TextTreeConfiguration? parentConfiguration,
    _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeQuizResultPageState_5 extends _i1.SmartFake
    implements _i6.QuizResultPageState {
  _FakeQuizResultPageState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuizGetAllDaoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizGetAllDaoImpl extends _i1.Mock implements _i7.QuizGetAllDaoImpl {
  @override
  _i2.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.Ref<Object?>);

  @override
  _i8.Future<_i3.QuizGetAllResponse> getQuizList(
          _i9.QuizGetAllRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuizList,
          [request],
        ),
        returnValue:
            _i8.Future<_i3.QuizGetAllResponse>.value(_FakeQuizGetAllResponse_1(
          this,
          Invocation.method(
            #getQuizList,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.QuizGetAllResponse>.value(_FakeQuizGetAllResponse_1(
          this,
          Invocation.method(
            #getQuizList,
            [request],
          ),
        )),
      ) as _i8.Future<_i3.QuizGetAllResponse>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  @override
  _i4.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i4.InheritedWidget);

  @override
  void visitAncestorElements(_i4.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i10.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DiagnosticsNode describeElement(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i5.DiagnosticsNode);

  @override
  _i5.DiagnosticsNode describeWidget(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i5.DiagnosticsNode);

  @override
  List<_i5.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i5.DiagnosticsNode>[],
        returnValueForMissingStub: <_i5.DiagnosticsNode>[],
      ) as List<_i5.DiagnosticsNode>);

  @override
  _i5.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i5.DiagnosticsNode);
}

/// A class which mocks [QuizResultPageViewmodel].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizResultPageViewmodel extends _i1.Mock
    implements _i11.QuizResultPageViewmodel {
  @override
  List<bool> get isFavorites => (super.noSuchMethod(
        Invocation.getter(#isFavorites),
        returnValue: <bool>[],
        returnValueForMissingStub: <bool>[],
      ) as List<bool>);

  @override
  set isFavorites(List<bool>? _isFavorites) => super.noSuchMethod(
        Invocation.setter(
          #isFavorites,
          _isFavorites,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i2.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<_i6.QuizResultPageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i6.QuizResultPageState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i6.QuizResultPageState>.empty(),
      ) as _i8.Stream<_i6.QuizResultPageState>);

  @override
  _i6.QuizResultPageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeQuizResultPageState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeQuizResultPageState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.QuizResultPageState);

  @override
  set state(_i6.QuizResultPageState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.QuizResultPageState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeQuizResultPageState_5(
          this,
          Invocation.getter(#debugState),
        ),
        returnValueForMissingStub: _FakeQuizResultPageState_5(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i6.QuizResultPageState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<void> init(
    _i4.BuildContext? context,
    List<bool?>? scores,
    List<bool>? isFavorite,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #init,
          [
            context,
            scores,
            isFavorite,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void updateFavorite(List<bool>? isFavorite) => super.noSuchMethod(
        Invocation.method(
          #updateFavorite,
          [isFavorite],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i6.QuizResultPageState? old,
    _i6.QuizResultPageState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.RemoveListener addListener(
    _i12.Listener<_i6.QuizResultPageState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i2.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppLocalizations].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLocalizations extends _i1.Mock implements _i13.AppLocalizations {
  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);

  @override
  String get setting => (super.noSuchMethod(
        Invocation.getter(#setting),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#setting),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#setting),
        ),
      ) as String);

  @override
  String get privacyPolicy => (super.noSuchMethod(
        Invocation.getter(#privacyPolicy),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#privacyPolicy),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#privacyPolicy),
        ),
      ) as String);

  @override
  String get licenses => (super.noSuchMethod(
        Invocation.getter(#licenses),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#licenses),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#licenses),
        ),
      ) as String);

  @override
  String get adjective => (super.noSuchMethod(
        Invocation.getter(#adjective),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#adjective),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#adjective),
        ),
      ) as String);

  @override
  String get adverb => (super.noSuchMethod(
        Invocation.getter(#adverb),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#adverb),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#adverb),
        ),
      ) as String);

  @override
  String get verb => (super.noSuchMethod(
        Invocation.getter(#verb),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#verb),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#verb),
        ),
      ) as String);

  @override
  String get noun => (super.noSuchMethod(
        Invocation.getter(#noun),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#noun),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#noun),
        ),
      ) as String);

  @override
  String get pronoun => (super.noSuchMethod(
        Invocation.getter(#pronoun),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#pronoun),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#pronoun),
        ),
      ) as String);

  @override
  String get greet => (super.noSuchMethod(
        Invocation.getter(#greet),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#greet),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#greet),
        ),
      ) as String);

  @override
  String get star => (super.noSuchMethod(
        Invocation.getter(#star),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#star),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#star),
        ),
      ) as String);

  @override
  String get next => (super.noSuchMethod(
        Invocation.getter(#next),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#next),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#next),
        ),
      ) as String);

  @override
  String get word => (super.noSuchMethod(
        Invocation.getter(#word),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#word),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#word),
        ),
      ) as String);

  @override
  String get sentence => (super.noSuchMethod(
        Invocation.getter(#sentence),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#sentence),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#sentence),
        ),
      ) as String);

  @override
  String get translation => (super.noSuchMethod(
        Invocation.getter(#translation),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#translation),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#translation),
        ),
      ) as String);

  @override
  String get wordlist => (super.noSuchMethod(
        Invocation.getter(#wordlist),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#wordlist),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#wordlist),
        ),
      ) as String);

  @override
  String get question => (super.noSuchMethod(
        Invocation.getter(#question),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#question),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#question),
        ),
      ) as String);

  @override
  String get wrong => (super.noSuchMethod(
        Invocation.getter(#wrong),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#wrong),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#wrong),
        ),
      ) as String);

  @override
  String get correct => (super.noSuchMethod(
        Invocation.getter(#correct),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#correct),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#correct),
        ),
      ) as String);

  @override
  String get noselect => (super.noSuchMethod(
        Invocation.getter(#noselect),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#noselect),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#noselect),
        ),
      ) as String);

  @override
  String get questionSentence => (super.noSuchMethod(
        Invocation.getter(#questionSentence),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#questionSentence),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#questionSentence),
        ),
      ) as String);

  @override
  String get noStarSentence => (super.noSuchMethod(
        Invocation.getter(#noStarSentence),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#noStarSentence),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#noStarSentence),
        ),
      ) as String);

  @override
  String get quiz => (super.noSuchMethod(
        Invocation.getter(#quiz),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#quiz),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#quiz),
        ),
      ) as String);

  @override
  String get scoreGraph => (super.noSuchMethod(
        Invocation.getter(#scoreGraph),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#scoreGraph),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#scoreGraph),
        ),
      ) as String);

  @override
  String get totalScole => (super.noSuchMethod(
        Invocation.getter(#totalScole),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#totalScole),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#totalScole),
        ),
      ) as String);

  @override
  String get seeTable => (super.noSuchMethod(
        Invocation.getter(#seeTable),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#seeTable),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#seeTable),
        ),
      ) as String);

  @override
  String get goTopic => (super.noSuchMethod(
        Invocation.getter(#goTopic),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#goTopic),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#goTopic),
        ),
      ) as String);

  @override
  String get table => (super.noSuchMethod(
        Invocation.getter(#table),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#table),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#table),
        ),
      ) as String);

  @override
  String get web => (super.noSuchMethod(
        Invocation.getter(#web),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#web),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#web),
        ),
      ) as String);

  @override
  String get mode => (super.noSuchMethod(
        Invocation.getter(#mode),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#mode),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#mode),
        ),
      ) as String);
}

/// A class which mocks [QuizFavoriteSqlRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizFavoriteSqlRepository extends _i1.Mock
    implements _i15.QuizFavoriteSqlRepository {
  @override
  _i8.Future<int> insert(
    String? word,
    String? answer,
    String? sentence,
    String? translation,
    String? pronunciation,
    String? topicType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            word,
            answer,
            sentence,
            translation,
            pronunciation,
            topicType,
          ],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> delete(String? word) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [word],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<String>> getTopicWords(String? topicType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopicWords,
          [topicType],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<List<_i16.Quiz>> getAllquizzes() => (super.noSuchMethod(
        Invocation.method(
          #getAllquizzes,
          [],
        ),
        returnValue: _i8.Future<List<_i16.Quiz>>.value(<_i16.Quiz>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i16.Quiz>>.value(<_i16.Quiz>[]),
      ) as _i8.Future<List<_i16.Quiz>>);

  @override
  _i8.Future<List<String>> getAllAnswers(String? topicType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAnswers,
          [topicType],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);
}
