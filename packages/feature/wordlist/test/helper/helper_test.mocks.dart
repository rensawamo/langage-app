// Mocks generated by Mockito 5.4.4 from annotations
// in feature_wordlist/test/helper/helper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core_dao/dao/word_get_all/word_get_all_dao.dart' as _i3;
import 'package:core_dao/dao/word_get_all/word_get_all_request.dart' as _i5;
import 'package:core_dao/dao/word_get_all/word_get_all_response.dart' as _i2;
import 'package:core_model/quiz/quiz_model.dart' as _i7;
import 'package:core_repository/sql/quiz_favorite_sql/quiz_favorite_sql_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWordGetAllResponse_0 extends _i1.SmartFake
    implements _i2.WordGetAllResponse {
  _FakeWordGetAllResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WordGetAllDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockWordGetAllDao extends _i1.Mock implements _i3.WordGetAllDao {
  @override
  _i4.Future<_i2.WordGetAllResponse> getWordList(
          _i5.WordGetAllRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWordList,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.WordGetAllResponse>.value(_FakeWordGetAllResponse_0(
          this,
          Invocation.method(
            #getWordList,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WordGetAllResponse>.value(_FakeWordGetAllResponse_0(
          this,
          Invocation.method(
            #getWordList,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.WordGetAllResponse>);
}

/// A class which mocks [QuizFavoriteSqlRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizFavoriteSqlRepository extends _i1.Mock
    implements _i6.QuizFavoriteSqlRepository {
  @override
  _i4.Future<int> insert(
    String? word,
    String? answer,
    String? sentence,
    String? translation,
    String? pronunciation,
    String? topicType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            word,
            answer,
            sentence,
            translation,
            pronunciation,
            topicType,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> delete(String? word) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [word],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<String>> getTopicWords(String? topicType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopicWords,
          [topicType],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<List<_i7.Quiz>> getAllquizzes() => (super.noSuchMethod(
        Invocation.method(
          #getAllquizzes,
          [],
        ),
        returnValue: _i4.Future<List<_i7.Quiz>>.value(<_i7.Quiz>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i7.Quiz>>.value(<_i7.Quiz>[]),
      ) as _i4.Future<List<_i7.Quiz>>);

  @override
  _i4.Future<List<String>> getAllAnswers(String? topicType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAnswers,
          [topicType],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
}
